#!/usr/bin/env python3
"""Flipper Node:
Publishers:
    /diff/cmd_vel (geometry_msgs/Twist) - velocity for robot to follow trajectory

Subscribers:
    /diff/odom    (nav_msgs/Odometry) - receives data on the odometry of the robot

Services:
    none

Broadcasts:
    none

Parameters:
    //instantiated in .xacro files (please see ReadMe.md for more info) -- all floats
    (chassis: length, width, height
        wheel: radius
        caster: diameter)
        -- all distances in m; masses in kg

Exceptions:
    none
"""  #this goes up here my bad (shout out to Sauerpatchkid for guidance as usual)

import rospy
from geometry_msgs.msg import Twist, Vector3, Pose, PoseStamped, Quaternion
# import math
from nav_msgs.msg import Path, Odometry
# import rosservice as srv
# from std_srvs.srv import Empty, EmptyResponse
# import tf
# import tf2_ros
import yaml

class Flipper: 
    '''
    Creates Flipper object: receives robot odometry to produce/publish its trajectory
        arguments: none
        returns: none
        exceptions: none

        publisher (pubc): publishes velocity of robot path as Twist to topic cmd_vel
        subscriber (subo): subscribes to (receives) odometry of robot at current time as Odometry from topic odom
    '''
    def __init__(self):
        '''
        initial definition of variables for Flipper
            arguments: none
            returns: none
            exceptions: none
        '''
        rospy.init_node('flipper', anonymous=False)

        self.now = rospy.Time.now().secs + rospy.Time.now().nsecs/1000000000
        self.x = 0
        self.y = 0
        self.ang = 0
        self.freq = 100

        self.lapse = 0
        self.fwd = True

        self.pubc = rospy.Publisher('/diff/cmd_vel', Twist, queue_size=10)
        self.subo = rospy.Subscriber('/diff/odom', Odometry, self.inpos)
        
        self.path = Path()
        self.path.header.stamp = rospy.Time.now()
        self.path.header.frame_id = 'world'
    
    def inpos(self, odominit):
        '''
        callback function for subscriber, subo;
            arguments: odominit -- odometry object containing the robot's odometry
                inc: position (x and y), orientation (y)
            returns: none
            exceptions: none
        '''
        self.x = odominit.pose.pose.position.x
        self.y = odominit.pose.pose.position.y
        self.ang = odominit.pose.pose.orientation.y
    
    def pubvel(self, vee):
        '''
        publishing function (to keep main bit clean, sorta)
            arguments: vee -- linear velocity (float) in +x-direction of the robot (m/s)
                unlike follow_rect, does not require ome since robot isn't supposed to turn
            returns: none
            exceptions: none
        '''
        rate = rospy.Rate(self.freq)
        trajectory = Twist(Vector3(vee, 0, 0), Vector3(0, 0, 0))
        self.pubc.publish(trajectory)
        rate.sleep()
    
if __name__ == "__main__":
    '''
    Creates Flipper object and initializes speed (spd)
        starts with all velocities = 0
    Sleep to account for turbulence after spawning (acts as a cushion so as to not disturb trajectory)
        performs at least 1 flip in each direction (forward, backward)
    Moves back and forth along somewhat linear trajectory of specified length
        quick changes cause chassis to flip over wheels
        yknow like when you play super smash brothers or animal crossing and you trip?
        that, except cooler.
    '''
    flip = Flipper()
    spd = 3.0
    flip.pubvel(0)

    rospy.sleep(1.5)  #this is so it can settle and do the initial flips before it goes completely rogue

    while not rospy.is_shutdown():
        while flip.ang<math.pi and flip.x < 1.0 and flip.x >= 0:
            # print('x', flip.x)
            # print('y', flip.y)
            flip.pubvel(spd)
        # print('---')
        while flip.ang<math.pi and flip.x >= 1.0 and flip.x <= 2.0:
            # print('-x', flip.x)
            # print(('-y', flip.y))
            flip.pubvel(-spd)
    rospy.spin()